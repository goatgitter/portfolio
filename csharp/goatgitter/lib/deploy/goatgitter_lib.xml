<?xml version="1.0"?>
<doc>
    <assembly>
        <name>goatgitter_lib</name>
    </assembly>
    <members>
        <member name="T:goatgitter.lib.Base">
            Base class from which other classes will inherit.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="P:goatgitter.lib.Base.AppPath">
            <summary>
            Static Application Path for File Input/Output purposes.
            </summary>
        </member>
        <member name="M:goatgitter.lib.Base.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.Base.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.Base.ToString">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.Base.Clone``1">
            <summary>
            Generic method for performing deep clone on an object that inherits from Base.
            </summary>
            <typeparam name="T">The Type of object being cloned.</typeparam>
            <returns>An object of the specified type with all the data from the source object set.</returns>
        </member>
        <member name="T:goatgitter.lib.BaseWithLog">
            Base class with Logging from which other classes will inherit.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="P:goatgitter.lib.BaseWithLog.AppNotepad">
            <summary>
            Static Application Notepad Property for logging purposes.
            </summary>
        </member>
        <member name="P:goatgitter.lib.BaseWithLog.Notepad">
            <summary>
             Instance Notepad Property for logging purposes.
            </summary>
        </member>
        <member name="M:goatgitter.lib.BaseWithLog.#ctor(goatgitter.lib.tools.ILogger,goatgitter.lib.tools.ILogger)">
            <summary>
            Constructor for BaseWithLog Objects.
            Automatically creates a Notepad for logging.
            </summary>
        </member>
        <member name="T:goatgitter.lib.Constants">
            <summary>
            Class of static Constants used throughout the application.
            </summary>
        </member>
        <member name="T:goatgitter.lib.extensions.Enums">
            Extension class for Enums.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.extensions.Enums.GetValByDesc``1(System.String,goatgitter.lib.tools.ILogger)">
            <summary>
            Finds the Enum Value for a given description.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="description"></param>
            <param name="notepad"></param>
            <returns>The Enum Value with the given description, if found, otherwise the default Enum value.</returns>
        </member>
        <member name="M:goatgitter.lib.extensions.Enums.GetDesc(System.Enum,goatgitter.lib.tools.ILogger)">
            <summary>
            Returns the Description of an Enum Value.
            </summary>
            <param name="enumValue"></param>
            <param name="notepad"></param>
            <returns>String containing the description, if one is defined, otherwise, the field name is returned.</returns>
        </member>
        <member name="M:goatgitter.lib.extensions.Enums.IsEmpty(System.Enum)">
            <summary>
            Method to determine if an Enum instance contains a value.
            </summary>
            <param name="enumVal">Enum instance to evaluate.</param>
            <returns>bool true if enumVal does not contain a value, otherwise false.</returns>
        </member>
        <member name="M:goatgitter.lib.extensions.Enums.IsNotEmpty(System.Enum)">
            <summary>
            Method to determine if an Enum instance does not contain a value.
            </summary>
            <param name="enumVal">Enum instance to evaluate.</param>
            <returns>bool true if enumVal does contain a value, otherwise false.</returns>
        </member>
        <member name="T:goatgitter.lib.extensions.Exceptions">
            Extension class for Exceptions.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.extensions.Exceptions.LogPrint(System.Exception)">
            <summary>
            Prints details about an Exception for Logging purposes.
            </summary>
            <param name="exception">The exception to inspect for details to log.</param>
            <returns>A String containing the relevant details from the exception object.</returns>
        </member>
        <member name="T:goatgitter.lib.extensions.Ints">
            Extension class for Ints.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.extensions.Ints.IsPositive(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Ints.ToSafeString(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.extensions.Objects">
            Extension class for Objects.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.extensions.Objects.GetLog(System.Object,log4net.ILog,goatgitter.lib.tools.ILogger)">
            <summary>
            Gets the static logger.
            If the Notepad is empty, it is created.
            </summary>
            <param name="obj">An object to retrieve the log for.</param>
            <param name="log">An optional ILog to retrieve the log for.</param>
            <param name="logger">An optional ILoggger to retrieve the log for.</param>
            <returns></returns>
        </member>
        <member name="M:goatgitter.lib.extensions.Objects.LogExceptionWithData(System.Object,System.String,System.Object[],System.Exception,log4net.ILog)">
            <summary>
            Logs detailed information about an exception to the log.
            </summary>
            <param name="obj">An object with a log to be updated.</param>
            <param name="msg">An application message to assist with support debugging.</param>
            <param name="data">And array of objects containing data for the message.</param>
            <param name="exception">An Exception with details to log.</param>
            <param name="log">An optional ILog to update.</param>
        </member>
        <member name="M:goatgitter.lib.extensions.Objects.SafeToString(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Objects.IsEmpty(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Objects.IsNotEmpty(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Objects.SafeEquals(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.extensions.StringBuilders">
            Extension class for StringBuilders.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.extensions.StringBuilders.AppendIf(System.Text.StringBuilder,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.StringBuilders.AppendLineIf(System.Text.StringBuilder,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.extensions.Strings">
            Extension class for Strings.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.extensions.Strings.WordCount(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Strings.IsEmpty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Strings.IsNotEmpty(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Strings.IsValidFileName(System.String,goatgitter.lib.tools.ILogger)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.extensions.Strings.IsValidDirName(System.String,goatgitter.lib.tools.ILogger)">
            <summary>
            Method to check if a string contains a valid directory name.
            </summary>
            <param name="str">The string to be validated.</param>
            <param name="notepad">A logger to log any exceptions encountered.</param>
            <returns>A boolean indicating if the string is a valid directory name.</returns>
        </member>
        <member name="M:goatgitter.lib.extensions.Strings.IsValidDirAndFileName(System.String,goatgitter.lib.tools.ILogger)">
            <summary>
            Method that checks if a string contains a valid directory and file name.
            </summary>
            <param name="str">A string to validate.</param>
            <param name="notepad">Optional logger to log exceptions.</param>
            <returns>bool</returns>
        </member>
        <member name="T:goatgitter.lib.tests.BaseWithLogTest">
            BaseWithLogTest class Tests the BaseWithLog class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="T:goatgitter.lib.tests.BaseWithLogTest.TestClass">
            <inheritdoc/>
        </member>
        <member name="P:goatgitter.lib.tests.BaseWithLogTest.TestClass.Id">
            <summary>
            An int representing a unique record.
            </summary>
        </member>
        <member name="P:goatgitter.lib.tests.BaseWithLogTest.TestClass.Name">
            <summary>
            A string containing a name for this class.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.TestClass.#ctor(goatgitter.lib.tools.ILogger,goatgitter.lib.tools.ILogger)">
            <summary>
            Constructor for the TestClass object.
            </summary>
            <param name="appNotepad"></param>
            <param name="notepad"></param>
        </member>
        <member name="F:goatgitter.lib.tests.BaseWithLogTest.testClassObj">
            <summary>
            An instance of the Test Class to be tested.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.CleanupTest">
            <summary>
            Resets objects modified during the test execution.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.ConstructorTest">
            <summary>
            Tests the Constructor
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.EqualsTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.ToStringTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.GetHashCodeTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseWithLogTest.CloneTest">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.tests.extensions.EnumsTest">
            EnumsTest class Tests the Enums extension class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tests.extensions.EnumsTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.EnumsTest.CleanupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.EnumsTest.IsEmptyTest(System.Enum,System.Boolean)">
            <summary>
            Tests the IsEmpty Method
            </summary>
            <param name="val"></param>
            <param name="expectedResult"></param>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.EnumsTest.IsNotEmptyTest(System.Enum,System.Boolean)">
            <summary>
            Tests the IsNotEmpty Method
            </summary>
            <param name="val"></param>
            <param name="expectedResult"></param>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.EnumsTest.GetDescTest(System.Enum,System.String,System.Int32)">
            <summary>
            Tests the GetDesc Method
            </summary>
            <param name="val"></param>
            <param name="expectedDesc"></param>
            <param name="errorsExpected"></param>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.EnumsTest.GetValByDescTest``1(``0,System.String,System.Int32)">
            <summary>
            Tests the GetValByDesc Method
            </summary>
            <param name="expectedVal"></param>
            <param name="desc"></param>
            <param name="errorsExpected"></param>
        </member>
        <member name="T:goatgitter.lib.tests.extensions.ExceptionsTest">
            ObjectsTest class Tests the Objects extension class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ExceptionsTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ExceptionsTest.CleanupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ExceptionsTest.LogPrintTest">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.tests.extensions.IntsTest">
            ObjectsTest class Tests the Objects extension class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tests.extensions.IntsTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.IntsTest.CleanupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.IntsTest.IsPositiveTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.IntsTest.ToSafeStringTest">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.tests.extensions.ObjectsTest">
            ObjectsTest class Tests the Objects extension class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ObjectsTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ObjectsTest.CleanupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ObjectsTest.IsEmptyTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ObjectsTest.IsNotEmptyTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ObjectsTest.SafeToStringTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.ObjectsTest.SafeEqualsTest">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.tests.extensions.StringBuildersTest">
            ObjectsTest class Tests the Objects extension class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringBuildersTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringBuildersTest.CleanupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringBuildersTest.AppendIfTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringBuildersTest.AppendLineIfTest">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.tests.extensions.StringsTest">
            StringsTest class Tests the Strings extension class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.CleanupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.IsEmptyTest(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.IsNotEmptyTest(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.WordCountTest(System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.IsValidFileNameTest(System.String,System.Boolean,System.Int32)">
            <summary>
            Tests the IsValidFileName method
            </summary>
            <param name="val">A string containing the value to be validated.</param>
            <param name="expectedResult">A bool representing the expected result from the method.</param>
            <param name="errorsExpected">An integer representing the number of expected errors to result from calling the method.</param>
        </member>
        <member name="M:goatgitter.lib.tests.extensions.StringsTest.IsValidDirNameTest(System.String,System.Boolean,System.Int32)">
            <summary>
            Tests the IsValidDirName method
            </summary>
            <param name="val">A string containing the value to be validated.</param>
            <param name="expectedResult">A bool representing the expected result from the method.</param>
            <param name="errorsExpected">An integer representing the number of expected errors to result from calling the method.</param>
        </member>
        <member name="T:goatgitter.lib.tests.TestConstants">
            <summary>
            A class of constant data used in Unit Tests.
            </summary>
        </member>
        <member name="T:goatgitter.lib.tests.tools.FilerTest">
             MIT License
             Copyright (c) 2022 goatgitter
             ClassName : FilerTest
             Purpose : Tests the Filer Class.
            
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.SetupTest">
            <summary>
            Creates initial state of the objects for test execution.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.CleanupTest">
            <summary>
            Resets objects modified during the test execution.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.ConstructorTest">
            <summary>
            Tests the Constructor
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.SafeGetFilePathTest(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Tests the SafeGetFilePath method
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.SafeCreateDirectoryTest(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Tests the SafeCreateDirectory Method
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.SafeCreateFileTest(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Tests the SafeCreateFile Method
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.SafeDeleteFolderTest(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Tests the SafeDeleteFolder Method 
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.RetrieveFileTest(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Tests the method for retrieving a file.
            </summary>
            <param name="folder"></param>
            <param name="fileName"></param>
            <param name="isResultEmpty"></param>
            <param name="createFolder"></param>
            <param name="createFile"></param>
            <param name="numErrors"></param>
        </member>
        <member name="M:goatgitter.lib.tests.tools.FilerTest.RetrieveFileForUpdateNoErrorsTest(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Tests the method for retrieving a file for update.
            </summary>
            <param name="folder"></param>
            <param name="fileName"></param>
            <param name="isResultEmpty"></param>
            <param name="numErrors"></param>
        </member>
        <member name="T:goatgitter.lib.tests.tools.LoggerTest">
             MIT License
             Copyright (c) 2022 goatgitter
             ClassName : LoggerTest
             Purpose : Tests the Logger Class.
            
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.SetupTest">
            <summary>
            Creates initial state of the objects for test execution.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.CleanupTest">
            <summary>
            Resets objects modified during the test execution.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.ConstructorTest">
            <summary>
            Tests the Constructor
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.LogInfoTest">
            <summary>
            Tests the LogInfo Method
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.LogErrorTest">
            <summary>
            Tests the LogError Method
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.LogExceptionTest">
            <summary>
            Tests the LogException Method
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.tools.LoggerTest.LogExceptionWithDataTest">
            <summary>
            Tests the LogException Method
            </summary>
        </member>
        <member name="T:goatgitter.lib.tests.BaseTest">
            BaseTest class Tests the Base class.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="T:goatgitter.lib.tests.BaseTest.TestClass">
            <inheritdoc/>
        </member>
        <member name="P:goatgitter.lib.tests.BaseTest.TestClass.Id">
            <summary>
            An int representing a unique record.
            </summary>
        </member>
        <member name="P:goatgitter.lib.tests.BaseTest.TestClass.Name">
            <summary>
            A string containing a name for this class.
            </summary>
        </member>
        <member name="F:goatgitter.lib.tests.BaseTest.testClassObj">
            <summary>
            An instance of the Test Class to be tested.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.SetupTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.CleanupTest">
            <summary>
            Resets objects modified during the test execution.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.ConstructorTest">
            <summary>
            Tests the Constructor
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.EqualsTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.ToStringTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.GetHashCodeTest">
            <inheritdoc/>
        </member>
        <member name="M:goatgitter.lib.tests.BaseTest.CloneTest">
            <inheritdoc/>
        </member>
        <member name="T:goatgitter.lib.tests.TestBase">
            TestBase class from which other Test classes will inherit.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="F:goatgitter.lib.tests.TestBase.MockAppLogger">
            <summary>
            Mock App Logger
            </summary>
        </member>
        <member name="F:goatgitter.lib.tests.TestBase.MockLogger">
            <summary>
            Mock Logger
            </summary>
        </member>
        <member name="F:goatgitter.lib.tests.TestBase.MockLog">
            <summary>
            Mock Log
            </summary>
        </member>
        <member name="F:goatgitter.lib.tests.TestBase.MockAppLog">
            <summary>
            Mock App Log
            </summary>
        </member>
        <member name="F:goatgitter.lib.tests.TestBase.TestLogType">
            <summary>
            Type to be used to the Test Loggers.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.SetupMocks">
            <summary>
            A common method to be called to setup common mock objects for unit tests.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.ResetMocks">
            <summary>
            A common method to be called to reset common mock objects for unit tests.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.VerifyStarted(System.Type,System.Int32)">
            <summary>
            Verifies that the Started Message was logged at the info level.
            </summary>
            <param name="logType">Type of the log.</param>
            <param name="numTimes">Integer representing the number of times the log should have been updated.</param>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.CreateTestInnerException">
            <summary>
            A method to create a Test Exception with the Inner Exception Message and Source.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.CreateTestExceptionWithInner">
            <summary>
            A method to create a Test Exception with an Inner Exception.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.GetTestExceptionWithInner">
            <summary>
            A method to generate a Test Exception with an Inner Exception.
            </summary>
            <returns>An Exception</returns>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.CreateTestException">
            <summary>
            A method to create a Test Exception without an Inner Exception.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tests.TestBase.GetTestException">
            <summary>
            A method to generate a Test Exception without an Inner Exception.
            </summary>
            <returns>An Exception</returns>
        </member>
        <member name="T:goatgitter.lib.tools.Filer">
            Utility class Filer gracefully handles File Input and Output Operations.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="M:goatgitter.lib.tools.Filer.#ctor(goatgitter.lib.tools.ILogger)">
            <summary>
            Constructor for the Filer Class.
            Filers come equiped with a Notepad to record details it might need later.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.GetAppPathFolder(System.String)">
            <summary>
            Gets the full path of the current application combined with a folder name.
            </summary>
            <param name="folder">a string containing the folder name.</param>
            <returns></returns>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.SafeGetFilePath(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Safely gets a Path object for the params specified.
            </summary>
            <param name="folder">The directory where the file resides.</param>
            <param name="fileName">The name of the file to retrieve.</param>
            <param name="createFolder">A boolean that specifies if the folder should automatically be created if it does not exist.</param>
            <param name="createFile">A boolean that specifies if the file should automatically be created if it does not exist.</param>
            <returns>A String for the Combined File Path.</returns>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.SafeCreateDirectory(System.String)">
            <summary>
            Safely creates a Directory.
            </summary>
            <param name="folder">The directory to be created.</param>
            <returns></returns>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.SafeCreateFile(System.String)">
            <summary>
            Safely creates a file.
            </summary>
            <param name="filePath">The file path where the file will be created.</param>
            <returns></returns>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.SafeDeleteFolder(System.String,System.Boolean)">
            <summary>
            Safely gets a Path object for the params specified.
            </summary>
            <param name="folder">The directory where the file resides.</param>
            <param name="emptyFolder">A boolean that specifies if the folder should automatically be emptied.</param>
            <returns>bool</returns>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.RetrieveFile(System.String,System.String)">
            <summary>
            Opens an exisiting File
            </summary>
            <param name="folder">The directory where the file resides.</param>
            <param name="fileName">The name of the file to retrieve.</param>
            <returns>FileStream result</returns>
        </member>
        <member name="M:goatgitter.lib.tools.Filer.RetrieveFileForUpdate(System.String,System.String)">
            <summary>
            Opens a File for writing information.
            </summary>
            <param name="folder">The directory where the file resides.</param>
            <param name="fileName">The name of the file to retrieve for update.</param>
            <returns>FileStream result</returns>
        </member>
        <member name="T:goatgitter.lib.tools.ILogger">
            <summary>
            An interface for the Logger.
            </summary>
        </member>
        <member name="P:goatgitter.lib.tools.ILogger.Log">
            <summary>
            The Log4Net Log
            </summary>
        </member>
        <member name="P:goatgitter.lib.tools.ILogger.LogType">
            <summary>
            The Type that will be printed in the Log4Net Log Messages.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tools.ILogger.Started">
            <summary>
            Logs a message to the Log at the Info Level that the logging has Started.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tools.ILogger.LogInfo(System.String)">
            <summary>
            Logs a message to the Log at the Info Level.
            </summary>
            <param name="info">A string containing the message to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.ILogger.LogError(System.String)">
            <summary>
            Logs a message to the Log at the Error Level.
            </summary>
            <param name="error">A string containing the message to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.ILogger.LogWarn(System.String)">
            <summary>
            Logs a message to the Log at the Warning Level.
            </summary>
            <param name="warning">A string containing the message to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.ILogger.LogException(System.String,System.Exception)">
            <summary>
            Logs a message to the Log at the Error Level.
            </summary>
            <param name="message">A string containing the message to be logged.</param>
            <param name="exception">An exception contianing information to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.ILogger.LogExceptionWithData(System.String,System.Object[],System.Exception)">
            <summary>
            Logs a message with data to the Log at the Error Level.
            </summary>
            <param name="message">A string containing the message to be logged.</param>
            <param name="messageData">An array of objects containing the data for the message to be logged.</param>
            <param name="exception">An exception contianing information to be logged.</param>
        </member>
        <member name="T:goatgitter.lib.tools.Logger">
            Utility class Logger handles exceptions gracefully.
            MIT License
            Copyright (c) 2022 goatgitter
            
        </member>
        <member name="P:goatgitter.lib.tools.Logger.Log">
            <summary>
            The Log4Net Log
            </summary>
        </member>
        <member name="P:goatgitter.lib.tools.Logger.LogType">
            <summary>
            The Type that will be printed in the Log4Net Log Messages.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.#ctor(log4net.ILog,System.Type)">
            <summary>
            Constructor for the Logger class that automatically sets the Log Type to the caller's type.
            </summary>
            <param name="log">The log4net log to use, or null.  If Null, automatically created.</param>
            <param name="logType">They Type to be printed in the Log4Net Log Messages.</param>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.Started">
            <summary>
            Logs a message to the Log at the Info Level that the logging has Started.
            </summary>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.LogInfo(System.String)">
            <summary>
            Logs a message to the Log at the Info Level.
            </summary>
            <param name="info">A string containing the message to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.LogError(System.String)">
            <summary>
            Logs a message to the Log at the Error Level.
            </summary>
            <param name="error">A string containing the message to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.LogWarn(System.String)">
            <summary>
            Logs a message to the Log at the Warning Level.
            </summary>
            <param name="warning">A string containing the message to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.LogException(System.String,System.Exception)">
            <summary>
            Logs a message to the Log at the Error Level.
            </summary>
            <param name="message">A string containing the message to be logged.</param>
            <param name="exception">An exception contianing information to be logged.</param>
        </member>
        <member name="M:goatgitter.lib.tools.Logger.LogExceptionWithData(System.String,System.Object[],System.Exception)">
            <summary>
            Logs a message with data to the Log at the Error Level.
            </summary>
            <param name="message">A string containing the message to be logged.</param>
            <param name="messageData">An array of objects containing the data for the message to be logged.</param>
            <param name="exception">An exception contianing information to be logged.</param>
        </member>
    </members>
</doc>
